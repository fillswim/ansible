---
# tasks file for 06-Delete-Control-Node

# ================================== Проверка, что нода существует =================================

- name: Завершение выполнение плэйбука, так как удаляемая нода не найдена
  ansible.builtin.meta: end_play
  when:
    - deleted_nodes not in groups['k8s_masters']          # Если хоста нет в группе k8s_masters
    - deleted_nodes not in groups['k8s_workers']          # Если хоста нет в группе k8s_workers

# ============================================== Ping ==============================================

- name: Ping any Master
  become: true
  ansible.builtin.ping:
  when: inventory_hostname in groups['k8s_masters']

- name: Ping Deleted Worker
  become: true
  ansible.builtin.ping:
  when: inventory_hostname in deleted_nodes

# ========================================= kubectl delete =========================================

- name: Block kubectl delete
  become: true
  when:
    - inventory_hostname in groups['k8s_masters']         # Выполняется на хостах из группы Masters,
    - inventory_hostname not in deleted_nodes             # но не на удаляемом хосте
  block:

    - name: Checking that the node exists
      ignore_errors: true
      changed_when: false
      ansible.builtin.shell: |
        kubectl get nodes --no-headers | awk '{print $1}' | grep "{{ deleted_nodes }}"
      register: checking_node_exists_output

    - name: Kubectl delete node {{ deleted_nodes }}
      ansible.builtin.shell: |
        kubectl delete node "{{ deleted_nodes }}"
      register: kubectl_delete_node_output
      when:
        - checking_node_exists_output.stdout != ""

    - name: Print result kubectl delete node
      ansible.builtin.debug:
        var: kubectl_delete_node_output.stdout
      when:
        - kubectl_delete_node_output.stdout is defined

# ======================================= Block Delete ETCD Member =======================================

- name: Block Delete ETCD Member
  become: true
  when:
    - "'master' in deleted_nodes"                         # Выполняется только если происходит удаление Master ноды
    - inventory_hostname in groups['k8s_masters']         # Выполняется на хостах из группы Masters,
    - inventory_hostname not in deleted_nodes             # но не на удаляемом хосте
  block:

    - name: Get deleted ETCD member ID
      changed_when: false
      ansible.builtin.shell: |
        kubectl -n kube-system exec etcd-{{ inventory_hostname }} -- etcdctl \
        --endpoints {{ ansible_ssh_host }}:2379 \
        --cacert /etc/kubernetes/pki/etcd/ca.crt \
        --key /etc/kubernetes/pki/etcd/server.key \
        --cert /etc/kubernetes/pki/etcd/server.crt \
        --write-out=simple \
        member list | grep {{ deleted_nodes }} | awk '{print $1}' | sed 's/.$//'
      register: deleted_etcd_member_id_output

    - name: Переопределить переменную deleted_etcd_member_id
      ansible.builtin.set_fact:
        deleted_etcd_member_id: "{{ deleted_etcd_member_id_output.stdout }}"
      when:
        - deleted_etcd_member_id_output.stdout != ""

    - name: Вывод ID удаляемого ETCD member
      ansible.builtin.debug:
        var: deleted_etcd_member_id
      when:
        - deleted_etcd_member_id is defined

    - name: Delete ETCD member
      ansible.builtin.shell: |
        kubectl -n kube-system exec etcd-{{ inventory_hostname }} -- etcdctl \
        --endpoints {{ ansible_ssh_host }}:2379 \
        --cacert /etc/kubernetes/pki/etcd/ca.crt \
        --key /etc/kubernetes/pki/etcd/server.key \
        --cert /etc/kubernetes/pki/etcd/server.crt \
        member remove {{ deleted_etcd_member_id }}
      register: delete_etcd_member_output
      when:
        - deleted_etcd_member_id is defined

    - name: Вывод результата удаления ETCD member
      ansible.builtin.debug:
        var: delete_etcd_member_output.stdout
      when:
        - delete_etcd_member_output.stdout is defined

# ========================================== kubeadm reset =========================================

- name: Kubeadm reset
  become: true
  ansible.builtin.shell: kubeadm reset --force
  when: inventory_hostname in deleted_nodes
