---
# tasks file for 01-prepare-vm-for-k8s

# ============================================== Ping ==============================================

- name: Ping
  become: true
  ansible.builtin.ping:

# ========================================== Disable Swap ==========================================

- name: Check is swap enable
  ansible.builtin.shell: swapon
  register: swap_present
  changed_when: false
  ignore_errors: true

- name: If swap is enabled - disable it
  ansible.builtin.shell: swapoff -a
  when: swap_present.stdout != ""

- name: Disable SWAP in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*\s*swap\s*.*)$'
    replace: '# \1'

# ======================================== Disable firewall ========================================

- name: Disable firewalld
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false

# ========================================= Disable SELinux ========================================

- name: Check Disable SELinux
  ansible.posix.selinux:
    state: disabled
  register: selinux_ret

- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled
  when: selinux_ret.reboot_required

# ==================== Forwarding IPv4 and letting iptables see bridged traffic ====================

- name: Create modules-load.d/k8s.conf
  become: true
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |-
      overlay
      br_netfilter
    owner: root
    group: root
    mode: "0644"

- name: Load modules
  community.general.modprobe:
    name: "{{ item }}"
  loop:
    - overlay
    - br_netfilter

- name: Edit sysctl.conf
  become: true
  ansible.posix.sysctl:
    sysctl_file: /etc/sysctl.d/k8s.conf
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  with_items:
    - name: net.bridge.bridge-nf-call-iptables
      value: 1
    - name: net.bridge.bridge-nf-call-ip6tables
      value: 1
    - name: net.ipv4.ip_forward
      value: 1

# ======================================== Copy config.toml ========================================

- name: Создание /etc/containerd
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Скопировать config.toml
  become: true
  ansible.builtin.copy:
    src: config.toml
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: "0644"
# ======================================= Install Containerd =======================================

- name: Создание папку download
  ansible.builtin.file:
    path: /root/download
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download containerd
  ansible.builtin.get_url:
    url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    dest: /root/download/containerd-{{ containerd_version }}-linux-amd64.tar.gz
    owner: root
    group: root
    mode: "0644"

- name: Extract containerd-{{ containerd_version }}-linux-amd64.tar.gz into /usr/local
  become: true
  ansible.builtin.unarchive:
    src: /root/download/containerd-{{ containerd_version }}-linux-amd64.tar.gz
    dest: /usr/local
    remote_src: true

- name: Создание папку /usr/local/lib/systemd/system
  ansible.builtin.file:
    path: /usr/local/lib/systemd/system
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download containerd.service
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/containerd/containerd/main/containerd.service"
    dest: /usr/local/lib/systemd/system/containerd.service
    owner: root
    group: root
    mode: "0644"

- name: daemon-reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Start containerd
  ansible.builtin.systemd_service:
    name: containerd.service
    state: started
    enabled: true

- name: Add /usr/local/bin to .bashrc
  become: true
  ansible.builtin.lineinfile:
    path: /root/.bashrc
    line: "{{ item }}"
  with_items:
    - "export PATH=$PATH:/usr/local/bin"

# ========================================== Install Runc ==========================================

- name: Download Runc
  ansible.builtin.get_url:
    url: "https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64"
    dest: /root/download/runc.amd64
    owner: root
    group: root
    mode: "0644"

- name: Install Runc
  become: true
  ansible.builtin.copy:
    src: /root/download/runc.amd64
    dest: /usr/local/sbin/runc
    remote_src: true
    owner: root
    group: root
    mode: "0755"

# ======================================= Install CNI Plugin =======================================

- name: Download CNI plugin
  ansible.builtin.get_url:
    url: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_plugins_version }}/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz"
    dest: /root/download/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz
    owner: root
    group: root
    mode: "0644"

- name: Создание папки /opt/cni/bin
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    owner: root
    group: root
    mode: "0775"

- name: Extract cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz into /opt/cni/bin
  become: true
  ansible.builtin.unarchive:
    src: /root/download/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz
    dest: /opt/cni/bin
    remote_src: true

# ============================= Installing kubeadm, kubelet and kubectl ============================

- name: Block for RedHat
  when: ansible_os_family == "RedHat"
  become: true
  block:
    - name: Add kubernetes repository
      ansible.builtin.yum_repository:
        name: kubernetes
        file: kubernetes
        description: kubernetes
        baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_major_version }}/rpm/"
        enabled: true
        gpgcheck: true
        gpgkey: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_major_version }}/rpm/repodata/repomd.xml.key"
        exclude: "kubelet kubeadm kubectl cri-tools kubernetes-cni"

    - name: Install kubeadm, kubelet and kubectl
      ansible.builtin.yum:
        name: "{{ packages }}"
        disable_excludes: all
        exclude: kubernetes
      vars:
        packages:
          - kubeadm-{{ kubernetes_minor_version }}-*
          - kubelet-{{ kubernetes_minor_version }}-*
          - kubectl-{{ kubernetes_minor_version }}-*

- name: Start and enable kubelet
  ansible.builtin.service:
    name: kubelet
    state: started
    enabled: true

# ============================================= Reboot =============================================

- name: Reboot
  throttle: 1
  become: true
  ansible.builtin.reboot:
